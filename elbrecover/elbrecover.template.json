{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Monitor Unhealthy Instances on ELB (that are not in an ASG) and reboot if OutOfService",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Configure CloudWatch Self Healing for Load Balancers"
                    },
                    "Parameters": [
                        "ELBName1",
                        "EmailEndpoint"
                    ]
                }
            ],
            "ParameterLabels": {
                "ELBName1": {
                    "default": "Specify the Load Balancer Name (leave blank for none)"
                },
                "EmailEndpoint": {
                    "default": "Specify the email address to be notified of self healing events"
                },
                "CustomerName": {
                    "default": "Specify Customer Name & Environment - ie Datacom DemoMSP Management"
                }
            }
        }
    },
    "Parameters": {
        "CustomerName": {
            "Type": "String"
        },
        "ELBName1": {
            "Type": "String"
        },
        "EmailEndpoint": {
            "Type": "String"
        },
        "EnableSNSEmail": {
            "Type": "String",
            "Default": "true",
            "AllowedValues": [
                "true",
                "false"
            ]
        }
    },
    "Conditions": {
        "EnableSNSEmail": {
            "Fn::Equals": [
                {
                    "Ref": "EnableSNSEmail"
                },
                "true"
            ]
        }
    },
    "Resources": {
        "LBAlarm1": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": {
                    "Fn::Join": [
                        " ",
                        [
                            "Unhealthy",
                            "Host",
                            "Count",
                            {
                                "Ref": "ELBName1"
                            }
                        ]
                    ]
                },
                "AlarmDescription": "Alarm if unhealthy host count > 0",
                "AlarmActions": [
                    {
                        "Ref": "ElbRecoverTopic"
                    }
                ],
                "MetricName": "UnHealthyHostCount",
                "Namespace": "AWS/ELB",
                "ComparisonOperator": "GreaterThanThreshold",
                "EvaluationPeriods": "3",
                "Period": "300",
                "Statistic": "Sum",
                "Threshold": "0",
                "Dimensions": [
                    {
                        "Name": "LoadBalancerName",
                        "Value": {
                            "Ref": "ELBName1"
                        }
                    }
                ]
            }
        },
        "ElbRecoverTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": {
                    "Ref": "CustomerName"
                },
                "TopicName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::AccountId"
                            },
                            "-lbautorecovery"
                        ]
                    ]
                },
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "ELBLambdaRecover",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ]
            }
        },
        "SNSEmailSub": {
            "Type": "AWS::SNS::Subscription",
            "Condition": "EnableSNSEmail",
            "Properties": {
                "Endpoint": {
                    "Ref": "EmailEndpoint"
                },
                "Protocol": "email",
                "TopicArn": {
                    "Ref": "ElbRecoverTopic"
                }
            }
        },
        "elbrecover": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "const AWS = require('aws-sdk');\nconst elb = new AWS.ELB();\nconst ec2 = new AWS.EC2();\nconst { elbName } = process.env;\nexports.handler = (event) => {\n  console.log('Received Event: \\n', JSON.stringify(event, undefined, 2));\n};\nconst elbparams = {\n  LoadBalancerName:\n        elbName,\n};\nelb.describeInstanceHealth(elbparams, (elberr, elbdata) => {\n  const instanceStates = elbdata.InstanceStates;\n  const oos = instanceStates.filter(oosFilter => oosFilter.State === 'OutOfService');\n  if (elberr) {\n    console.log(elberr, elberr.stack);\n  } if (oos.length > 0) {\n    oos.forEach((oosInstance) => {\n      const oosInstanceId = oosInstance.InstanceId;\n      const oosInstanceState = oosInstance.State;\n      const ec2params = {\n        InstanceIds: [\n          oosInstanceId,\n        ],\n      };\n      ec2.rebootInstances(ec2params, (ec2err, ec2data) => {\n        if (ec2err) console.log(ec2err, ec2err.stack);\n        console.log(`${oosInstanceId} is ${oosInstanceState}: Rebooting!!`);\n        return ec2data;\n      });\n    });\n  }\n});\n"
                },
                "Description": "Receives Unhealthy Host events from CloudWatch and reboots instances that are out of service",
                "FunctionName": "ELB-Recover",
                "Handler": "index.handler",
                "MemorySize": "256",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaELBRecoverRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs8.10",
                "Environment": {
                    "Variables": {
                        "elbName": {
                            "Ref": "ELBName1"
                        }
                    }
                },
                "Timeout": "60"
            }
        },
        "LambdaELBRecoverRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "LambdaELBRecoverRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ec2-sns-cwlogs-access",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "*"
                                    ],
                                    "Resource": [
                                        "arn:aws:sns:*:*:*",
                                        "arn:aws:ec2:*:*:*",
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "elb-access",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:*",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "TriggerLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "ELBLambdaRecover",
                        "Arn"
                    ]
                },
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "ElbRecoverTopic"
                }
            }
        }
    }
}